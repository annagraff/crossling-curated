setwd("~/Desktop/crossling-curated/scripts/TypLinkInd/")
#### This script densifies the full TypLinkInd logical and statistical datasets, as well as their domain-wise subsets (morphosyntax, phonology, lexicon)
rm(list=ls())
# load packages
library(densify)
library(tidyverse)
library(gmt)
library(ggplot2)
# read functions
source("../functions.R")
# read in logical TLI data
logical <- read.csv("../../curated_data/TypLinkInd/logicalTLI/full/logicalTLI_full.csv") %>% select(-X)
# read in statistical TLI data
statistical <- read.csv("../../curated_data/TypLinkInd/statisticalTLI/full/statisticalTLI_full.csv") %>% select(-X)
# generate taxonomy matrix
taxonomy_matrix <- as_flat_taxonomy_matrix(glottolog_languoids)
# for densification, ensure all blanks, ? and "NA" are coded as NA
logical_for_pruning <- na_convert(logical)
statistical_for_pruning <- na_convert(statistical)
# group both logical and statistical data in 4 sets: (1) full, (2) morphosyntax only (Grammar+Grammatical categories), (3) phonology only, (4) lexicon only (Lexical semantics + Lexical classes)
logical_parameters <- read.csv("../../curated_data/TypLinkInd/logicalTLI/cldf/parameters.csv")
logical_full_for_pruning <- logical_for_pruning
logical_morphosyntax_for_pruning <- logical_for_pruning[which(apply(logical_for_pruning[which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0), c(1,which(names(logical_for_pruning)%in%filter(logical_parameters,domain == "Morphosyntax")$short.name))]
logical_full_for_pruning <- logical_for_pruning
logical_morphosyntax_for_pruning <- logical_for_pruning[which(apply(logical_for_pruning[which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0), c(1,which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories")$short.name))]
View(extract_condition_and_equator)
logical_full_for_pruning <- logical_for_pruning
logical_full_for_pruning <- logical_for_pruning
logical_morphosyntax_for_pruning <- logical_for_pruning[which(apply(logical_for_pruning[which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0), c(1,which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name))]
statistical_morphosyntax_for_pruning <- statistical_for_pruning[which(apply(statistical_for_pruning[which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name))]
statistical_parameters <- read.csv("../../curated_data/TypLinkInd/statisticalTLI/cldf/parameters.csv")
statistical_full_for_pruning <- statistical_for_pruning
statistical_morphosyntax_for_pruning <- statistical_for_pruning[which(apply(statistical_for_pruning[which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name))]
logical_phonology_for_pruning <- logical_for_pruning[which(apply(logical_for_pruning[which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name))]
statistical_phonology_for_pruning <- statistical_for_pruning[which(apply(statistical_for_pruning[which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name))]
# group both logical and statistical data in 4 sets: (1) full, (2) morphosyntax only (Grammar+Grammatical categories), (3) phonology only, (4) lexicon only (Lexical semantics + Lexical classes)
logical_parameters <- read.csv("../../curated_data/TypLinkInd/logicalTLI/cldf/parameters.csv")
logical_full_for_pruning <- logical_for_pruning
logical_morphosyntax_for_pruning <- logical_for_pruning[which(apply(logical_for_pruning[which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0), c(1,which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name))]
logical_phonology_for_pruning <- logical_for_pruning[which(apply(logical_for_pruning[which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name))]
logical_lexicon_for_pruning <- logical_for_pruning[which(apply(logical_for_pruning[which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Lexical_semantics", "Lexical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(logical_for_pruning)%in%filter(logical_parameters,grouping %in% c("Lexical_semantics", "Lexical_categories"))$short.name))]
statistical_parameters <- read.csv("../../curated_data/TypLinkInd/statisticalTLI/cldf/parameters.csv")
statistical_full_for_pruning <- statistical_for_pruning
statistical_morphosyntax_for_pruning <- statistical_for_pruning[which(apply(statistical_for_pruning[which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Grammar_other", "Grammar_linear_order", "Grammatical_categories"))$short.name))]
statistical_phonology_for_pruning <- statistical_for_pruning[which(apply(statistical_for_pruning[which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Phonology", "Phonology_prosodic", "Phonology_segmental_c", "Phonology_segmental_v"))$short.name))]
statistical_lexicon_for_pruning <- statistical_for_pruning[which(apply(statistical_for_pruning[which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Lexical_semantics", "Lexical_categories"))$short.name)],1,function(x)length(na.omit(x)))>0),c(1,which(names(statistical_for_pruning)%in%filter(statistical_parameters,grouping %in% c("Lexical_semantics", "Lexical_categories"))$short.name))]
# specify parameters for densification
min_variability <- 3 # each variable must have at least 3 languages in its second-largest state
density_mean <- "log_odds"
##### densify full curation
# comment on weights: TLI is very sparse in terms of coding density and in terms of taxonomic diversity
# we do not specify that taxonomy should be more important in trimming and provide equal weights for densify()
# run matrix optimisation, set a seed for reproducibility
set.seed(1111)
logical_full_log <-
densify(data = logical_full_for_pruning,
taxon_id = "glottocode",
min_variability = min_variability,
density_mean = density_mean,
taxonomy = glottolog_languoids,
density_mean_weights = list(coding = 0.999, taxonomy = 0.999))
set.seed(1111)
statistical_full_log <-
densify(data = statistical_full_for_pruning,
taxon_id = "glottocode",
min_variability = min_variability,
density_mean = density_mean,
taxonomy = glottolog_languoids,
density_mean_weights = list(coding = 0.999, taxonomy = 0.999))
# identify optima
pruned_logical_full_large <- prune(logical_full_log,
scoring_function = n_data_points * coding_density * taxonomic_index)
pruned_logical_full_small <- prune(logical_full_log,
scoring_function = n_data_points^3 * coding_density^3 * row_coding_density_min * taxonomic_index)
pruned_statistical_full_large <- prune(statistical_full_log,
scoring_function = n_data_points * coding_density * taxonomic_index)
pruned_statistical_full_small <- prune(statistical_full_log,
scoring_function = n_data_points^3 * coding_density^3 * row_coding_density_min * taxonomic_index)
# retrieve corresponding data from input (to re-establish differences between ? and NA)
pruned_logical_full_large <- logical[which(logical$glottocode%in%pruned_logical_full_large$glottocode), which(names(logical)%in%names(pruned_logical_full_large))]
pruned_logical_full_small <- logical[which(logical$glottocode%in%pruned_logical_full_small$glottocode), which(names(logical)%in%names(pruned_logical_full_small))]
pruned_statistical_full_large <- statistical[which(statistical$glottocode%in%pruned_statistical_full_large$glottocode), which(names(statistical)%in%names(pruned_statistical_full_large))]
pruned_statistical_full_small <- statistical[which(statistical$glottocode%in%pruned_statistical_full_small$glottocode), which(names(statistical)%in%names(pruned_statistical_full_small))]
# save pruned matrices
write.csv(pruned_logical_full_large,"../../curated_data/TypLinkInd/logicalTLI/full/logicalTLI_full_pruned_large.csv")
write.csv(pruned_logical_full_small,"../../curated_data/TypLinkInd/logicalTLI/full/logicalTLI_full_pruned_small.csv")
write.csv(pruned_statistical_full_large,"../../curated_data/TypLinkInd/statisticalTLI/full/statisticalTLI_full_pruned_large.csv")
write.csv(pruned_statistical_full_small,"../../curated_data/TypLinkInd/statisticalTLI/full/statisticalTLI_full_pruned_small.csv")
nrow(pruned_logical_full_large)
ncol(pruned_logical_full_large)
ncol(pruned_logical_full_small)
nrow(pruned_logical_full_small)
nrow(pruned_statistical_full_small)
ncol(pruned_statistical_full_small)
ncol(pruned_statistical_full_large)
nrow(pruned_statistical_full_large)
statistical_for_pruning
matrix <- statistical_for_pruning
View(matrix)
summarize_matrix
matrix
nlg <- nrow(matrix)
nvar <- ncol(matrix)-1
glottolog_languoids %>% filter (id %in% matrix$glottocode)
as_flat_taxonomy_matrix(glottolog_languoids)
as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode)
nfam <- as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique() %>% length()
nfam
as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique()
as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique() %>% nrow()
nfam <- as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique() %>% nrow()
matrix[,2:nvar]
!is.na(matrix[,2:nvar])
sum(!is.na(matrix[,2:nvar]))
prop <- sum(!is.na(matrix[,2:nvar]))/(nlg*nvar)
prop
# function to summarize matrices
summarize_matrix <- function(matrix){
nlg <- nrow(matrix)
nvar <- ncol(matrix)-1
nfam <- as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique() %>% nrow()
prop <- sum(!is.na(matrix[,2:nvar]))/(nlg*nvar)
}
# specify parameters for densification
min_variability <- 3 # each variable must have at least 3 languages in its second-largest state
# function to summarize matrices
summarize_matrix <- function(matrix){
nlg <- nrow(matrix)
nvar <- ncol(matrix)-1
nfam <- as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique() %>% nrow()
prop <- sum(!is.na(matrix[,2:nvar]))/(nlg*nvar)
}
# function to summarize matrices
summarize_matrix <- function(matrix){
nlg <- nrow(matrix)
nvar <- ncol(matrix)-1
nfam <- as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique() %>% nrow()
prop <- sum(!is.na(matrix[,2:nvar]))/(nlg*nvar)
return <- c(nlg=nlg, nvar=nvar, nfam=nfam, prop=prop)
}
summarize_matrix(statistical_full_for_pruning)
# function to summarize matrices
summarize_matrix <- function(matrix){
nlg <- nrow(matrix)
nvar <- ncol(matrix)-1
nfam <- as_flat_taxonomy_matrix(glottolog_languoids) %>% filter (id %in% matrix$glottocode) %>% select(level1) %>% unique() %>% nrow()
prop <- sum(!is.na(matrix[,2:nvar]))/(nlg*nvar)
return(c(nlg=nlg, nvar=nvar, nfam=nfam, prop=prop))
}
summarize_matrix(statistical_full_for_pruning)
summarize_matrix(logical_full_for_pruning)
summarize_matrix(statistical_full_for_pruning)
summarize_matrix(logical_morphosyntax_for_pruning)
summarize_matrix(logical_morphosyntax_for_pruning)
summarize_matrix(logical_phonology_for_pruning)
summarize_matrix(logical_lexicon_for_pruning)
summarize_matrix(statistical_morphosyntax_for_pruning)
summarize_matrix(statistical_phonology_for_pruning)
summarize_matrix(statistical_lexicon_for_pruning)
